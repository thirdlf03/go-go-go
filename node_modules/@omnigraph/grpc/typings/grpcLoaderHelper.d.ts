import protobufjs, { type AnyNestedObject } from 'protobufjs';
import type { Logger, YamlConfig } from '@graphql-mesh/types';
import { type MaybePromise } from '@graphql-tools/utils';
import { type ChannelCredentials } from '@grpc/grpc-js';
export declare class GrpcLoaderHelper implements AsyncDisposable {
    private subgraphName;
    private baseDir;
    private logger;
    private config;
    private schemaComposer;
    private asyncDisposableStack;
    constructor(subgraphName: string, baseDir: string, logger: Logger, config: YamlConfig.GrpcHandler);
    [Symbol.asyncDispose](): Promise<void>;
    buildSchema(): Promise<import("graphql").GraphQLSchema>;
    private processReflection;
    private processDescriptorFile;
    private processProtoFile;
    private getDescriptorSets;
    getCredentials(): MaybePromise<ChannelCredentials>;
    visit({ nested, name, currentPath, rootJsonName, rootJson, rootLogger: logger, }: {
        nested: AnyNestedObject;
        name: string;
        currentPath: string[];
        rootJsonName: string;
        rootJson: protobufjs.INamespace;
        rootLogger: Logger;
    }): void;
}
